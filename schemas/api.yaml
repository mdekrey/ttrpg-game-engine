openapi: "3.0.2"
info:
  title: Dnd Classes
  version: "1.0"
servers:
  - url: /

components:
  responses:
    ModelValidation:
      description: Request was sent that did not match validation rules in spec
      content:
        application/json:
          schema:
            type: object
            additionalProperties:
              type: array
              items:
                type: string
  schemas:
    CharacterRole:
      type: string
      enum:
        - Controller
        - Defender
        - Leader
        - Striker
    ToolType:
      type: string
      enum:
        - Weapon
        - Implement
    ToolRange:
      type: string
      enum:
        - Melee
        - Range
    Ability:
      type: string
      enum:
        - Strength
        - Constitution
        - Dexterity
        - Intelligence
        - Wisdom
        - Charisma
    DamageType:
      type: string
      enum:
        - Fire
        - Cold
        - Necrotic
        - Radiant
        - Lightning
        - Thunder
        - Poison
        - Force
    ClassProfile:
      type: object
      required:
        - role
        - powerSource
        - tools
      properties:
        role:
          $ref: "#/components/schemas/CharacterRole"
        powerSource:
          type: string
        tools:
          type: array
          items:
            $ref: "#/components/schemas/ToolProfile"
    EditableClassDescriptor:
      type: object
      allOf:
        - type: object
          required: [name, description]
          properties:
            name:
              type: string
            description:
              type: string
        - $ref: "#/components/schemas/ClassProfile"
    ClassDescriptor:
      type: object
      allOf:
        - type: object
          required: [state]
          properties:
            state:
              $ref: "#/components/schemas/ProgressState"
        - $ref: "#/components/schemas/EditableClassDescriptor"
    ToolProfile:
      type: object
      required:
        - toolType
        - toolRange
        - abilities
        - preferredDamageTypes
        - powerProfileConfigs
        - possibleRestrictions
      properties:
        toolType:
          $ref: "#/components/schemas/ToolType"
        toolRange:
          $ref: "#/components/schemas/ToolRange"
        abilities:
          type: array
          items:
            $ref: "#/components/schemas/Ability"
        preferredDamageTypes:
          type: array
          items:
            type: array
            items:
              $ref: "#/components/schemas/DamageType"
        powerProfileConfigs:
          type: array
          items:
            $ref: "#/components/schemas/PowerProfileConfig"
        possibleRestrictions:
          type: array
          items:
            type: string
    PowerProfileConfig:
      type: object
      required:
        - powerChances
      properties:
        name:
          type: string
        powerChances:
          type: array
          items:
            $ref: "#/components/schemas/PowerChance"
    PowerChance:
      type: object
      required:
        - selector
        - weight
      properties:
        selector:
          type: string
        weight:
          type: number
    PowerTextProfile:
      type: object
      required:
        - id
        - usage
        - text
        - flavor
      properties:
        id:
          type: string
        level: { type: integer }
        usage: { $ref: "#/components/schemas/PowerFrequency" }
        text:
          $ref: "#/components/schemas/PowerTextBlock"
        flavor: { $ref: "#/components/schemas/FlavorText" }
    PowerFrequency:
      type: string
      enum:
        - At-Will
        - Encounter
        - Daily
    PowerTextBlock:
      type: object
      required:
        - name
        - typeInfo
        - powerUsage
        - keywords
        - rulesText
      properties:
        name:
          type: string
        typeInfo:
          type: string
        flavorText:
          type: string
        powerUsage:
          type: string
          # enum: ['At-Will', 'Encounter', 'Daily']
        keywords:
          type: array
          items:
            type: string
        actionType:
          type: string
        attackType:
          type: string
          # enum: ['Personal', 'Ranged', 'Melee', 'Close', 'Area']
        attackTypeDetails:
          type: string
        prerequisite:
          type: string
        requirement:
          type: string
        trigger:
          type: string
        target:
          type: string
        attack:
          type: string
        rulesText:
          type: array
          items:
            $ref: "#/components/schemas/RulesText"
        associatedPower:
          $ref: "#/components/schemas/PowerTextBlock"
    RulesText:
      type: object
      required:
        - label
        - text
      properties:
        label:
          type: string
        text:
          type: string
    ClassDetailsReadOnly:
      type: object
      allOf:
        - $ref: "#/components/schemas/EditableClassDescriptor"
        - type: object
          required:
            - powers
            - state
          properties:
            state:
              $ref: "#/components/schemas/ProgressState"
            powers:
              type: array
              items:
                $ref: "#/components/schemas/PowerTextProfile"
    FlavorText:
      type: object
      additionalProperties:
        type: string
    ProgressState:
      type: string
      enum:
        - In Progress
        - Finished
        - Read-Only
    PowerHighLevelInfo:
      type: object
      required:
        - level
        - usage
        - classProfile
        - toolIndex
      properties:
        level: { type: integer }
        usage: { $ref: "#/components/schemas/PowerFrequency" }
        classProfile: { $ref: "#/components/schemas/ClassProfile" }
        toolIndex: { type: integer }
        powerProfileIndex: { type: integer }
    PowerGeneratorState:
      type: object
      required:
        - iteration
        - buildContext
        - stage
        - powerProfile
        - flavorText
      properties:
        iteration: { type: integer }
        buildContext: { $ref: "#/components/schemas/LimitBuildContext" }
        stage: { $ref: "#/components/schemas/UpgradeStage" }
        powerProfile: { $ref: "#/components/schemas/PowerProfile" }
        flavorText: { $ref: "#/components/schemas/FlavorText" }
    PowerGeneratorChoices:
      type: object
      required:
        - state
        - choices
        - finalizedChoice
      properties:
        state: { $ref: "#/components/schemas/PowerGeneratorState" }
        finalizedChoice: { $ref: "#/components/schemas/PowerProfileChoice" }
        choices:
          type: array
          items: { $ref: "#/components/schemas/PowerProfileChoice" }
    PowerProfileChoice:
      type: object
      required: [profile, level, usage, flavorText, text]
      properties:
        profile:
          $ref: "#/components/schemas/PowerProfile"
        level: { type: integer }
        usage: { $ref: "#/components/schemas/PowerFrequency" }
        flavorText: { $ref: "#/components/schemas/FlavorText" }
        text:
          $ref: "#/components/schemas/PowerTextBlock"
    PowerProfile:
      type: object
      required:
        - attacks
        - modifiers
        - effects
      properties:
        attacks:
          type: array
          items:
            type: object
            format: any
        modifiers:
          type: array
          items:
            type: object
            format: any
        effects:
          type: array
          items:
            type: object
            format: any
    LimitBuildContext:
      type: object
      required:
        - powerInfo
        - initial
        - minimum
        - maxComplexity
      properties:
        powerInfo: { $ref: "#/components/schemas/PowerHighLevelInfo" }
        initial: { type: number }
        minimum: { type: number }
        maxComplexity: { type: integer }
    UpgradeStage:
      type: string
      enum:
        - Initialize Attacks
        - Standard
        - Finalize
        - Finished
    LegacyRuleSummary:
      type: object
      required:
        - wizardsId
        - name
        - type
      properties:
        wizardsId: { type: string }
        name: { type: string }
        flavorText: { type: string }
        type: { type: string }
paths:
  /api/generate-sample-power:
    x-dotnet-mvc-server-controller: Power
    post:
      operationId: generateSamplePower
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/PowerHighLevelInfo" }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - power
                  - powerJson
                  - modifierJson
                properties:
                  power:
                    $ref: "#/components/schemas/PowerTextBlock"
                  powerJson:
                    type: string
        400:
          $ref: "#/components/responses/ModelValidation"
  /api/generate-class:
    x-dotnet-mvc-server-controller: Class
    post:
      operationId: generatePowers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditableClassDescriptor"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - classProfileId
                properties:
                  classProfileId:
                    type: string
        400:
          $ref: "#/components/responses/ModelValidation"
  /api/class:
    x-dotnet-mvc-server-controller: Class
    post:
      operationId: createClass
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditableClassDescriptor"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - classProfileId
                properties:
                  classProfileId:
                    type: string
        400:
          $ref: "#/components/responses/ModelValidation"
        409:
          description: Failed to save due to state
  /api/class/{id}:
    x-dotnet-mvc-server-controller: Class
    get:
      operationId: getClass
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - original
                  - state
                properties:
                  original:
                    $ref: "#/components/schemas/ClassDetailsReadOnly"
                  state:
                    $ref: "#/components/schemas/ProgressState"
        404:
          description: Class not found
    delete:
      operationId: deleteClass
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        404:
          description: Class not found
    put:
      operationId: updateClass
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditableClassDescriptor"
      responses:
        204:
          description: OK
        400:
          $ref: "#/components/responses/ModelValidation"
        404:
          description: Class not found
        409:
          description: Failed to save due to state
  /api/class/{id}/lock:
    x-dotnet-mvc-server-controller: Class
    post:
      operationId: lockClass
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: OK
        404:
          description: Class not found
        409:
          description: Failed to save due to state
  /api/class/{classId}/power/{powerId}/flavor:
    x-dotnet-mvc-server-controller: Class
    post:
      operationId: setPowerFlavor
      parameters:
        - name: classId
          in: path
          required: true
          schema:
            type: string
        - name: powerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FlavorText"
      responses:
        200:
          description: OK
        404:
          description: Class or power not found
        409:
          description: Failed to save due to async changes
  /api/class/{classId}/power/{powerId}:
    x-dotnet-mvc-server-controller: Class
    put:
      operationId: replacePowerWith
      parameters:
        - name: classId
          in: path
          required: true
          schema:
            type: string
        - name: powerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - flavorText
                - profile
                - powerInfo
              properties:
                flavorText:
                  $ref: "#/components/schemas/FlavorText"
                profile:
                  $ref: "#/components/schemas/PowerProfile"
                powerInfo:
                  $ref: "#/components/schemas/PowerHighLevelInfo"
      responses:
        200:
          description: Power removed and new one will be added
        404:
          description: Class or power not found
        409:
          description: Failed to save due to async changes
    delete:
      operationId: replacePower
      parameters:
        - name: classId
          in: path
          required: true
          schema:
            type: string
        - name: powerId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Power removed and new one will be added
        404:
          description: Class or power not found
        409:
          description: Failed to save due to async changes
  /api/power/begin-generation:
    x-dotnet-mvc-server-controller: PowerGeneration
    post:
      operationId: beginPowerGeneration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PowerHighLevelInfo"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PowerGeneratorChoices"
        400:
          $ref: "#/components/responses/ModelValidation"
  /api/power/continue-generation:
    x-dotnet-mvc-server-controller: PowerGeneration
    post:
      operationId: continuePowerGeneration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - state
                - profile
                - advance
              properties:
                state:
                  $ref: "#/components/schemas/PowerGeneratorState"
                profile:
                  $ref: "#/components/schemas/PowerProfile"
                advance: { type: boolean }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PowerGeneratorChoices"
        400:
          $ref: "#/components/responses/ModelValidation"
  /api/legacy/races:
    x-dotnet-mvc-server-controller: Legacy
    get:
      operationId: getLegacyRaces
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/LegacyRuleSummary" }
  /api/legacy/classes:
    x-dotnet-mvc-server-controller: Legacy
    get:
      operationId: getLegacyClasses
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/LegacyRuleSummary" }
